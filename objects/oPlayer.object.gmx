<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer_Idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sPlayer_Idle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Création du joueur et ces variable

image_speed = 0.1

spd = 3
hspd = 0
vspd = 0
jspd = 8
hp = 1000 // vie 
maxHp = 1000 // vie maximal
argent = 5000
maxArgent = 10000

tete_index = 0
head_angle = 0
head_offset = 50

outMap = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animation et autre

/* Image X Scale*/

head_angle = point_direction(x,y-head_offset,mouse_x,mouse_y)

if (mouse_x &lt; x) {
    image_xscale = -1
} else {
    image_xscale = 1
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mouvement du joueur

keyLeft = keyboard_check(ord("A")) or keyboard_check(ord("Q"))
keyRight = keyboard_check(ord("D"))
keyJump = keyboard_check_pressed(vk_space)
keyFire = mouse_check_button_pressed(mb_left)

/* Graviter et saut */
if (y &lt; 608-70) {
    sprite_index = sPlayer_Jump

    if ( vspd &lt; 16 ) {
        vspd += 1
    }
} else {
    vspd = 0
    
    outMap = false
    
    if (keyJump){
        vspd = -jspd
    }
}

/* Touche directionnel */
if (vspd == 0 &amp;&amp; !outMap){
    if (keyLeft) { hspd = -spd sprite_index = sPlayer_Walk image_speed = 0.2}
    if (keyRight) { hspd = spd sprite_index = sPlayer_Walk image_speed = 0.2}
    if (!keyLeft &amp;&amp; !keyRight) || (keyLeft &amp;&amp; keyRight) { hspd = 0 sprite_index = sPlayer_Idle image_speed = 0.1}
}

/* Tirer les projectils */
if (keyFire) {
    if (argent &gt; 0) {
        bullet = instance_create(x,y-head_offset,oBullet)
        bullet.image_angle = head_angle
        argent -= 10
    }
}

/* Collision */
if (place_meeting(x+hspd,y,oSolid)){
    while (!place_meeting(x+sign(hspd),y,oSolid)){
        x += hspd
    }
    hspd = 0
}

if (x &lt; view_xview) {
    vspd = -20
    hspd = 5
    outMap = true
}

/*
if (place_meeting(x,y+vspd,oSolid)){
    while (!place_meeting(x,y+sign(vspd),oSolid)){
        y += vspd
    }
    vspd = 0
    y = round(y)
}
*/
x += hspd
y += vspd
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Affiche les têtes du joueur

draw_self()
draw_sprite_ext(sDtTeteCrache,tete_index,x+(image_xscale*5),y-head_offset,1,image_xscale,head_angle,c_white,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
